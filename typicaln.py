# -*- coding: utf-8 -*-
"""
/***************************************************************************
 typicaln
                                 A QGIS plugin
 Detection of city structures 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-22
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Huy
        email                : Huy
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QTimer
from PyQt5.QtGui import * #QIcon, QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import * # QAction, QFileDialog, QApplication, QDialog, QProgressBar, QPushButton, QFrame, 
from qgis.core import QgsProject, Qgis, QgsRasterLayer
from os import listdir
from os.path import isfile, join

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .typicaln_dialog import typicalnDialog
import os.path

from osgeo import gdal, gdal_array, osr

import os, glob
import numpy as np
import cv2
import time

#global_image = "path"

TIMELIMIT = 100

class typicaln:
    """QGIS Plugin Implementation."""

    global_image = "path"

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.QgsProject = QgsProject
        #self.global_image = ""
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'typicaln_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&typicaln')

        self.timer = QTimer()
        self.step = 0

        self.frame = QFrame()

        #self.QtGui.setStyle('Fusion')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('typicaln', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/typicaln/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Detection of city structures'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def get_image_path(self):
        print("get image path")
        return self.global_image

    def set_image_path(self, image):
        print("set image path")
        self.global_image = image
         

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&typicaln'),
                action)
            self.iface.removeToolBarIcon(action)


    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select   output file ","", '*.csv')
        self.dlg.lineEdit.setText(filename)

    def select_file(self):
        print("select file")
        filename = QFileDialog.getOpenFileName(self.dlg, 'Open File')
        self.dlg.lineEdit_2.setText(filename[0])
        self.iface.messageBar().pushMessage("Input Path " + filename[0], duration=10)
        self.global_image = filename[0]
        print("global image" ,self.global_image)
        #print(path)
        #self.set_image_path(path)
        #return filename[0]
        
        #path_to_tif = gdal.Open(filename[0])
        #band = path_to_tif.GetRasterBand(1)





    def add_to_panel(self):
        print("add to panel")
        #self.timer.start(100, self.dlg.progressBar)
        
        path_to_tif = self.global_image
        print("Path ", path_to_tif)
        
        # image = cv2.imread(path_to_tif)
        # image = cv2.Canny(image,10,244)

        if self.dlg.checkBox.isChecked()==True: 
            print("dir is checked")
            files = [f for f in glob.glob(path_to_tif + "**/*.tif", recursive=True)]
            for f in files:
                #print(f)
                base=os.path.basename(f)
                #print(base)
                layername=os.path.splitext(base)[0]
                #rlayer = QgsRasterLayer(f, layername+"_layer")
                #print()
                self.iface.addRasterLayer(f,layername+"_Raster")

        if self.dlg.checkBox_2.isChecked()==True:
            print("file is checked")
            rlayer = QgsRasterLayer(path_to_tif, "SRTM layer name")
            #QgsMapLayerRegistry.instance().addMapLayer(vlayer)
            print("raster: ",rlayer)
            #self.QgsProject.instance().addMapLayer(rlayer)
            self.iface.addRasterLayer(path_to_tif,"MyRaster")


        #QgsProject.instance().addMapLayer(raster)
        #if filename 

    def exe_HED(self):
        print("HED")
        #import detect_edges_image 
        #os.system('python detect_edges_image.py -d hed_model -i ')  
        selectedLayerIndex = self.dlg.comboBox_2.currentIndex()
        self.iface.messageBar().pushMessage(str(selectedLayerIndex), duration=10)


    def objToRaster(self):
        print("obj to raster")
        path_to_tif = self.global_image
       #self.iface.messageBar().pushMessage(str(path_to_tif), duration=2)
        onlyfiles = [f for f in listdir(path_to_tif) if isfile(join(path_to_tif, f))]
        print(onlyfiles)

    def loadDir(self):
        print("load directory")
        filename = QFileDialog.getExistingDirectory(self.dlg, 'Open File')
        self.dlg.lineEdit_2.setText(filename)
        self.iface.messageBar().pushMessage("Input Path " + filename[0], duration=10)
        self.global_image = filename
        print("global image" ,self.global_image)
        self.dlg.checkBox.setChecked(True)

        view = self.dlg.listView
        model = QStandardItemModel(view)
        files = [f for f in glob.glob(self.global_image + "**/*.xyz", recursive=True)]
        for f in files:
            model.appendRow(QStandardItem(f))
            print(f)
        view.setModel(model)
        view.show()





    def xyzToRaster(self):

        count =0 

        self.dlg.progressBar.setValue(count)

        print("xyzToRaster")



        os.system("mkdir /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis")
        #os.system("/Applications/QGIS3.app/Contents/MacOS/bin/./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/1.shp -HEADLINE 1 -FILENAME /Users/huydoduc/Desktop/mongolia/obj_xyz/xyz/1.xyz")
        path_to_tif = self.global_image
        print(path_to_tif)
        files = [f for f in glob.glob(path_to_tif + "**/*.xyz", recursive=True)]
        print(files)

        progress_step= int(100/len(files))
        print(progress_step)
        for f in files:
        #print(f)
            base=os.path.basename(f)
            #print(base)
            layername=os.path.splitext(base)[0]
            #rlayer = QgsRasterLayer(f, layername+"_layer")
            #print("./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/"+layername+".shp -HEADLINE 1 -FILENAME "+str(f))
            path_test="/Applications/QGIS3.app/Contents/MacOS/bin/./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/"+str(layername)+".shp -HEADLINE 1 -FILENAME "+str(f)+" "
            print(path_test)
            os.system("/Applications/QGIS3.app/Contents/MacOS/bin/./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/"+str(layername)+".shp -HEADLINE 1 -FILENAME "+str(f)+" ")
            #self.iface.addRasterLayer(f,layername+"_Raster")
            self.dlg.progressBar.setValue(count+progress_step)

        self.dlg.progressBar.setValue(100)



    def reloadLayers(self):
        print("reload layers")

        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        self.dlg.comboBox_2.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])


    def openness(self):

        print("openness")
        os.system("mkdir /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis_openness")
        path = self.global_image
        files = [f for f in glob.glob(path_to_tif + "**/*.xyz", recursive=True)]
        print(files)
        for f in files:
        #print(f)
            base=os.path.basename(f)
            #print(base)
            layername=os.path.splitext(base)[0]
            #rlayer = QgsRasterLayer(f, layername+"_layer")
            #print("./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/"+layername+".shp -HEADLINE 1 -FILENAME "+str(f))
            #path_test="/Applications/QGIS3.app/Contents/MacOS/bin/./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/"+str(layername)+".shp -HEADLINE 1 -FILENAME "+str(f)+" "
            #print(path_test)
            os.system("/Applications/QGIS3.app/Contents/MacOS/bin/./saga_cmd io_shapes 3 -POINTS /Users/huydoduc/Desktop/mongolia/testfolder_saga_qgis/"+str(layername)+".shp -HEADLINE 1 -FILENAME "+str(f)+" ")
            os.system("/Applications/QGIS3.app/Contents/MacOS/bin/./saga_cmd ta_lighting Topographic Openness -DEM /Users/huydoduc/Desktop/mongolia/obj_xyz/saga_cmd_interpolated/$var.sgrd -RADIUS 10.0 -METHOD 1 -DLEVEL 3.0 -NDIRS 8 -POS /Users/huydoduc/Desktop/mongolia/obj_xyz/openness/$var_POS.sdat -NEG /Users/huydoduc/Desktop/mongolia/obj_xyz/openness/$var_NEG.sdat")
            #self.iface.addRasterLayer(f,layername+"_Raster")


    def denoise(self):
        print("denoise")
        pixmap = QPixmap("/Users/huydoduc/Desktop/pos_openness.png")
        width = self.dlg.label_4.frameGeometry().width()
        height = self.dlg.label_4.frameGeometry().height()

        pixmap4 = pixmap.scaled(width, height, QtCore.Qt.KeepAspectRatio)

        self.dlg.label_4.setPixmap(pixmap4)
        self.dlg.show()


    def showImage(self):
        print("show image")


    def anzeige(self):

        count = 0

        while count < TIMELIMIT:
            count += 1
            #time.sleep(1)
            self.dlg.progressBar.setValue(count)
            self.timer.timeout.connect(self.anzeige)
            self.timer.start(1000)

    def run(self):
        """Run method that performs all the real work""" 

        print("run")


        #image = cv2.imread("1_saga_interpolated_resized.tif")
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = typicalnDialog()
            #self.dlg.setStyle(self.dlg,"Fusion")
            QApplication.setStyle("Fusion")
            self.dlg.pushButton.clicked.connect(self.select_output_file)
            self.dlg.pushButton_2.clicked.connect(self.select_file)
            self.dlg.pushButton_3.clicked.connect(self.add_to_panel)
            self.dlg.pushButton_4.clicked.connect(self.exe_HED)
            self.dlg.pushButton_5.clicked.connect(self.objToRaster)
            self.dlg.pushButton_6.clicked.connect(self.reloadLayers)
            self.dlg.pushButton_7.clicked.connect(self.denoise)
            self.dlg.pushButton_8.clicked.connect(self.loadDir)
            self.dlg.pushButton_9.clicked.connect(self.xyzToRaster)
            self.dlg.pushButton_10.clicked.connect(self.openness)
            self.dlg.pushButton_11.clicked.connect(self.anzeige)
            self.dlg.progressBar.setValue(0)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        self.dlg.comboBox_2.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])

        self.dlg.comboBox_3.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox_3.addItems([layer.name() for layer in layers])

        list1 = [self.tr('Opening'),self.tr('Closing'),self.tr('Erode'),self.tr('Dilate')]
        self.dlg.comboBox_4.addItems(list1)




        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #print("run")

            rlayer = QgsRasterLayer("/Users/huydoduc/Desktop/mongolia/all_elevation_models_from_dronedeploy/1.tif", "Rasterlayer")
            if not rlayer.isValid():
                print("Layer failed to load!")


            filename = self.dlg.lineEdit.text()
            with open(filename, 'w') as output_file:
              selectedLayerIndex = self.dlg.comboBox.currentIndex()
              selectedLayer = layers[selectedLayerIndex].layer()
              fieldnames = [field.name() for field in selectedLayer.fields()]
              # write header
              line = ','.join(name for name in fieldnames) + '\n'
              output_file.write(line)
              # wirte feature attributes
              for f in selectedLayer.getFeatures():
                line = ','.join(str(f[name]) for name in fieldnames) + '\n'
                output_file.write(line)
            self.iface.messageBar().pushMessage("Success", "Output file written at " + filename, level=Qgis.Success, duration=10)
            #pass
